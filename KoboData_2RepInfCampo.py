# -*- coding: utf-8 -*-
"""KoboCollectData.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g6fYkkyupbeH1hgmXrSzUvRNv-GTVKez
"""

import requests
import pandas as pd
import os
import re
import gspread
from google.oauth2.service_account import Credentials

# === ConfiguraciÃ³n ===
BASE_URL = "https://kf.kobotoolbox.org/assets/axWwJY5A9AeyzcJPtjACaf/submissions/?format=json"
HEADERS = {}

OUTPUT_DIR = "output"
OUTPUT_FILE = os.path.join(OUTPUT_DIR, "2_ReporteInfCampo.xlsx")

SPREADSHEET_ID = "1uhpIYhuFhfYJlHuJKq1VDsj9jFPXS4iW2qxdyPL4aiA"   # ðŸ‘‰ reemplazar por el ID real de tu Google Sheet
SHEET_NAME = "Datos_principales"


def sanitize_sheet_name(name: str) -> str:
    """Limpia el nombre de hoja para que sea vÃ¡lido en Excel."""
    cleaned = re.sub(r'[\/\\\?\*\[\]\:]', '_', name)
    return cleaned[:31]


def get_all_submissions(url, headers=None):
    """Descarga datos desde Kobo (maneja lista o dict con results)."""
    all_results = []
    next_url = url

    while next_url:
        print(f"ðŸ“¥ Descargando: {next_url}")
        resp = requests.get(next_url, headers=headers)
        resp.raise_for_status()
        data = resp.json()

        if isinstance(data, dict):
            results = data.get("results", [])
            all_results.extend(results)
            next_url = data.get("next")
        elif isinstance(data, list):
            all_results.extend(data)
            next_url = None
        else:
            print("âš  Respuesta inesperada de la API")
            next_url = None

    return all_results


def clean_dataframe(df: pd.DataFrame) -> pd.DataFrame:
    """Convierte valores NaN, inf y -inf en cadenas seguras para Google Sheets."""
    df = df.copy()
    df = df.replace([float("inf"), float("-inf")], None)
    df = df.fillna("")
    return df


def add_audit_columns(df: pd.DataFrame) -> pd.DataFrame:
    """Agrega columnas de auditorÃ­a personalizadas."""
    df = df.copy()
    df["audit_fecha_procesado"] = pd.Timestamp.now().strftime("%Y-%m-%d %H:%M:%S")
    df["audit_num_registros"] = len(df)
    return df


def upload_to_google_sheets(results):
    """Sube los datos a Google Sheets reemplazando todo el contenido."""
    scope = ["https://www.googleapis.com/auth/spreadsheets",
             "https://www.googleapis.com/auth/drive"]

    creds = Credentials.from_service_account_file("credentials.json", scopes=scope)
    client = gspread.authorize(creds)

    spreadsheet = client.open_by_key(SPREADSHEET_ID)

    # === Datos principales aplanados ===
    df_main = pd.json_normalize(results, sep=".")
    df_main = clean_dataframe(df_main)
    df_main = add_audit_columns(df_main)

    # === Subir a la hoja principal ===
    try:
        worksheet = spreadsheet.worksheet(SHEET_NAME)
    except gspread.exceptions.WorksheetNotFound:
        worksheet = spreadsheet.add_worksheet(title=SHEET_NAME, rows="100", cols="20")

    worksheet.clear()
    worksheet.update([df_main.columns.values.tolist()] + df_main.values.tolist())
    print(f"âœ… Datos actualizados en Google Sheets ({SHEET_NAME})")


def main():
    os.makedirs(OUTPUT_DIR, exist_ok=True)

    results = get_all_submissions(BASE_URL, headers=HEADERS)

    if not results:
        print("âš  No se encontraron resultados en la respuesta JSON")
        return

    # === Exportar a Excel ===
    df_main = pd.json_normalize(results, sep=".")
    df_main = clean_dataframe(df_main)
    df_main = add_audit_columns(df_main)

    repeat_groups = {}
    for row in results:
        for key, value in row.items():
            if isinstance(value, list) and all(isinstance(x, dict) for x in value):
                if key not in repeat_groups:
                    repeat_groups[key] = []
                for item in value:
                    item["_parent_id"] = row.get("_id")
                    repeat_groups[key].append(item)

    with pd.ExcelWriter(OUTPUT_FILE, engine="openpyxl") as writer:
        df_main.to_excel(writer, sheet_name="Datos_principales", index=False)
        for group_name, records in repeat_groups.items():
            df_group = pd.DataFrame(records)
            sheet_name = sanitize_sheet_name(group_name)
            df_group.to_excel(writer, sheet_name=sheet_name, index=False)

    print(f"âœ… Archivo Excel generado con {len(df_main)} registros en:\n{OUTPUT_FILE}")

    # === Subir a Google Sheets ===
    upload_to_google_sheets(results)


if __name__ == "__main__":
    main()
