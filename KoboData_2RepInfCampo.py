# -*- coding: utf-8 -*-
"""KoboCollectData.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g6fYkkyupbeH1hgmXrSzUvRNv-GTVKez
"""

import requests
import pandas as pd
import os
import re
import json
import gspread
from google.oauth2.service_account import Credentials

# === ConfiguraciÃ³n ===
BASE_URL = "https://kf.kobotoolbox.org/assets/axWwJY5A9AeyzcJPtjACaf/submissions/?format=json"
HEADERS = {}  # {"Authorization": "Token TU_TOKEN_AQUI"}

# ID de tu Google Sheet
SHEET_ID = "1uhpIYhuFhfYJlHuJKq1VDsj9jFPXS4iW2qxdyPL4aiA"

def sanitize_sheet_name(name: str) -> str:
    cleaned = re.sub(r'[\/\\\?\*\[\]\:]', '_', name)
    return cleaned[:31]

def get_all_submissions(url, headers=None):
    all_results = []
    next_url = url
    while next_url:
        print(f"ðŸ“¥ Descargando: {next_url}")
        resp = requests.get(next_url, headers=headers)
        resp.raise_for_status()
        data = resp.json()

        if isinstance(data, dict):
            results = data.get("results", [])
            all_results.extend(results)
            next_url = data.get("next")
        elif isinstance(data, list):
            all_results.extend(data)
            next_url = None
        else:
            print("âš  Respuesta inesperada de la API")
            next_url = None
    return all_results

def upload_to_google_sheets(results):
    # AutenticaciÃ³n con Google
    creds_dict = json.loads(os.environ["GOOGLE_CREDENTIALS"])
    creds = Credentials.from_service_account_info(
        creds_dict,
        scopes=["https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/drive"]
    )
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(SHEET_ID)

    # === Datos principales aplanados ===
    df_main = pd.json_normalize(results, sep=".")

    # Sobrescribir hoja principal
    try:
        worksheet = sh.worksheet("Datos_principales")
        sh.del_worksheet(worksheet)
    except:
        pass
    worksheet = sh.add_worksheet(title="Datos_principales", rows="1000", cols="20")
    worksheet.update([df_main.columns.values.tolist()] + df_main.values.tolist())

    # === Detectar grupos repetidos ===
    repeat_groups = {}
    for row in results:
        for key, value in row.items():
            if isinstance(value, list) and all(isinstance(x, dict) for x in value):
                if key not in repeat_groups:
                    repeat_groups[key] = []
                for item in value:
                    item["_parent_id"] = row.get("_id")
                    repeat_groups[key].append(item)

    # Subir cada grupo como hoja independiente
    for group_name, records in repeat_groups.items():
        df_group = pd.DataFrame(records)
        sheet_name = sanitize_sheet_name(group_name)
        try:
            worksheet = sh.worksheet(sheet_name)
            sh.del_worksheet(worksheet)
        except:
            pass
        worksheet = sh.add_worksheet(title=sheet_name, rows="1000", cols="20")
        worksheet.update([df_group.columns.values.tolist()] + df_group.values.tolist())

    print(f"âœ… Datos subidos correctamente a Google Sheets: {SHEET_ID}")

def main():
    results = get_all_submissions(BASE_URL, headers=HEADERS)
    if not results:
        print("âš  No se encontraron resultados en la respuesta JSON")
        return
    upload_to_google_sheets(results)

if __name__ == "__main__":
    main()
