# -*- coding: utf-8 -*-
"""KoboCollectData.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g6fYkkyupbeH1hgmXrSzUvRNv-GTVKez
"""

import requests
import pandas as pd
import os
import re

# === ConfiguraciÃ³n ===
BASE_URL = "https://kf.kobotoolbox.org/assets/axWwJY5A9AeyzcJPtjACaf/submissions/?format=json"

# Si es privado, usar token desde variable de entorno (GitHub Secret)
HEADERS = {}
# if "KOBO_TOKEN" in os.environ:
    # HEADERS = {"Authorization": f"Token {os.environ['KOBO_TOKEN']}"}

OUTPUT_DIR = "output"
OUTPUT_FILE = os.path.join(OUTPUT_DIR, "2_ReporteInfCampo.xlsx")


def sanitize_sheet_name(name: str) -> str:
    """Limpia el nombre de hoja para que sea vÃ¡lido en Excel."""
    cleaned = re.sub(r'[\/\\\?\*\[\]\:]', '_', name)
    return cleaned[:31]


def get_all_submissions(url, headers=None):
    """Descarga datos desde Kobo (maneja lista o dict con results)."""
    all_results = []
    next_url = url

    while next_url:
        print(f"ðŸ“¥ Descargando: {next_url}")
        resp = requests.get(next_url, headers=headers)
        resp.raise_for_status()
        data = resp.json()

        if isinstance(data, dict):
            results = data.get("results", [])
            all_results.extend(results)
            next_url = data.get("next")
        elif isinstance(data, list):
            all_results.extend(data)
            next_url = None
        else:
            print("âš  Respuesta inesperada de la API")
            next_url = None

    return all_results


def main():
    os.makedirs(OUTPUT_DIR, exist_ok=True)

    results = get_all_submissions(BASE_URL, headers=HEADERS)

    if not results:
        print("âš  No se encontraron resultados en la respuesta JSON")
        return

    df_main = pd.json_normalize(results, sep=".")

    repeat_groups = {}
    for row in results:
        for key, value in row.items():
            if isinstance(value, list) and all(isinstance(x, dict) for x in value):
                if key not in repeat_groups:
                    repeat_groups[key] = []
                for item in value:
                    item["_parent_id"] = row.get("_id")
                    repeat_groups[key].append(item)

    with pd.ExcelWriter(OUTPUT_FILE, engine="openpyxl") as writer:
        df_main.to_excel(writer, sheet_name="Datos_principales", index=False)
        for group_name, records in repeat_groups.items():
            df_group = pd.DataFrame(records)
            sheet_name = sanitize_sheet_name(group_name)
            df_group.to_excel(writer, sheet_name=sheet_name, index=False)

    print(f"âœ… Archivo Excel generado con {len(df_main)} registros en:\n{OUTPUT_FILE}")
    print(f"ðŸ“Š Hojas exportadas: Datos_principales + {[sanitize_sheet_name(k) for k in repeat_groups.keys()]}")


if __name__ == "__main__":
    main()

