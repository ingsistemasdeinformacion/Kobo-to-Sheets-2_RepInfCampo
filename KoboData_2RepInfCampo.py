# -*- coding: utf-8 -*-
"""KoboCollectData.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g6fYkkyupbeH1hgmXrSzUvRNv-GTVKez
"""

import requests
import pandas as pd
import os
import re
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# === ConfiguraciÃ³n ===
BASE_URL = "https://kf.kobotoolbox.org/assets/axWwJY5A9AeyzcJPtjACaf/submissions/?format=json"

# Si tu formulario es privado, usa tu Token:
# HEADERS = {"Authorization": "Token TU_TOKEN_AQUI"}
HEADERS = {}

SHEET_NAME = "KoboData-2_RepInfCampo"   # Nombre de la hoja en Google Drive


def sanitize_sheet_name(name: str) -> str:
    """Limpia el nombre de hoja para que sea vÃ¡lido en Excel/Sheets."""
    cleaned = re.sub(r'[\/\\\?\*\[\]\:]', '_', name)
    return cleaned[:31]


def get_all_submissions(url, headers=None):
    """Descarga todos los registros de KoboToolbox (paginados)."""
    all_results = []
    next_url = url

    while next_url:
        print(f"ðŸ“¥ Descargando: {next_url}")
        resp = requests.get(next_url, headers=headers)
        resp.raise_for_status()
        data = resp.json()

        if isinstance(data, dict):
            results = data.get("results", [])
            all_results.extend(results)
            next_url = data.get("next")
        elif isinstance(data, list):
            all_results.extend(data)
            next_url = None
        else:
            print("âš  Respuesta inesperada de la API")
            next_url = None

    return all_results


def flatten_values(value):
    """Convierte listas o diccionarios a cadenas legibles."""
    if isinstance(value, list):
        return ", ".join([str(v) for v in value])
    elif isinstance(value, dict):
        return "; ".join([f"{k}:{v}" for k, v in value.items()])
    return value


def upload_to_google_sheets(df, sheet_name=SHEET_NAME):
    """Sube el DataFrame a Google Sheets, agregando nuevas columnas en cada ejecuciÃ³n."""
    # AutenticaciÃ³n
    scope = ["https://spreadsheets.google.com/feeds",
             "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
    client = gspread.authorize(creds)

    spreadsheet = client.open(sheet_name)
    worksheet = spreadsheet.sheet1

    # Limpieza de valores
    df_clean = df.applymap(flatten_values)

    # Etiqueta de ejecuciÃ³n (fecha/hora)
    run_tag = datetime.now().strftime("%Y%m%d_%H%M")

    # Descargar datos ya existentes
    existing_data = worksheet.get_all_values()

    if not existing_data:
        # Si estÃ¡ vacÃ­o, subimos todo normal
        headers = [f"{col}_{run_tag}" for col in df_clean.columns]
        worksheet.update([headers] + df_clean.values.tolist())
    else:
        # Ya existe informaciÃ³n â†’ agregar nuevas columnas
        existing_cols = len(existing_data[0])
        new_headers = [f"{col}_{run_tag}" for col in df_clean.columns]

        # Insertar todas las nuevas columnas de una sola vez
        worksheet.add_cols(len(new_headers))

        # Actualizar encabezados
        worksheet.update_cell(1, existing_cols + 1, new_headers[0])
        if len(new_headers) > 1:
            worksheet.update(
                f"R1C{existing_cols+1}:R1C{existing_cols+len(new_headers)}",
                [new_headers]
            )

        # Insertar valores en bloque
        values_range = f"R2C{existing_cols+1}:R{len(df_clean)+1}C{existing_cols+len(new_headers)}"
        worksheet.update(values_range, df_clean.values.tolist())


def main():
    # === Descargar resultados de Kobo ===
    results = get_all_submissions(BASE_URL, headers=HEADERS)

    if not results:
        print("âš  No se encontraron resultados en la respuesta JSON")
        return

    # Aplanar JSON principal
    df_main = pd.json_normalize(results, sep=".")

    # Subir a Google Sheets
    upload_to_google_sheets(df_main)

    print(f"âœ… Datos subidos a Google Sheets ({SHEET_NAME}) agregando nuevas columnas.")


if __name__ == "__main__":
    main()
